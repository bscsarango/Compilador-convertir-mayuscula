
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 12 19:37:31 COT 2015
//----------------------------------------------------

package proyectojflex;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 12 19:37:31 COT 2015
  */
public class ConvertirSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConvertirSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public ConvertirSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConvertirSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\003\000\002\002\003\000\002\002\004\000\002\003" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\007\000\004\004\004\001\002\000\004\005\010\001" +
    "\002\000\004\002\001\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\006\011\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\007\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConvertirSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConvertirSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConvertirSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String salida="";
/*El metodo nos servira para capturar errores de sintaxis*/
    public void report_error(String mensaje, Object info) {

//Se creara esta variable para poder presentar un mensaje de error
       	StringBuffer m = new StringBuffer("Error");

//Esta línea nos sirve para presentar el mensaje de error
		//System.out.println("Mensaje: "+mensaje);

/*En esta linea se presentara el numero del token 
   en el cual se presenta el error*/
		//System.out.println("info: "+info.toString());

/*Convertiremos, a caracter, el numero del token que bota el error
  para poder dar un mensaje mas específico sobre el mismo.*/
char a=info.toString().charAt(1);

/*Esta estructura switch nos permitira dar un mensaje particular 
  para cada tipo de error encontrado en la sintaxis.*/
                switch (a){

                    case '1':
                        salida="Error SINTACTICO";
                        break;
                // Si el error se presente en el token LETRA
                    case '2': 
                        salida= " Letra no corresponde";
                        break;
                // Si el error se presente en el token SUMA
                    case '3': 
                        salida= " el operador '+' no es correcto";
                        break;

                // Si el error se presente en el token CONVERTIR
                    case '4': 
                        salida= " el operador '>'  no es correcto";
                        break;

                // Si el error se presente en el la finalización del archivo
                    case '0': 
                        salida= "error de caracter en el archivo ";
                        break;
                //En caso de que se presente un errror no esperado        
                    default:
                        System.out.println(a);
                        salida="error en su sintaxis, por favor verifique";
                        break;
                }

	//Verifica si la variable info (del error) es una instancia de Symbol
        if(info instanceof java_cup.runtime.Symbol) {
						
                    //Se crea una Variable de tipo Symbol que almacenará el info
                    java_cup.runtime.Symbol s =((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if (s.left >= 0) {
                m.append(" en linea " + (s.left + 1));
                /*Comprueba si el numero de columna es mayoro igual que cero */
                if (s.right >= 0) {
                    m.append(", y columna " + (s.right + 1));
                }
              }
            //Se establece cual sera el mensaje de error
                m.append(salida+" : "+mensaje);

	    //se presenta el mensjae de error	
            System.err.println(m);
        }
}
    /*Captura errores que son criticos para el compilador*/
    public void report_fatal_error(String message, Object info) {
       	System.out.println("ERROR: se ha ingresado un valor que no corresponde");
       	report_error(message, info);

            //Termina la ejecución del compilador en caso de error
		System.exit(1);
    }

/*Metodo para la conversión de la letra que es recibida como parametro*/
public void convertir_ac(String a){

                /*Se crea una variable tipo caracter dond se almacena 
                  la letra a convertir*/
		  char leer = a.charAt(0);

                /*Se crea una variable tipo int y al caracter lo transformamos a
                  entero y le restamos 32(la diferencia nuemrica entre 
                  mayusculas y minusculas)*/
		   int valor =(int)leer-32;

//Presentamos la letra convertida
System.out.println("La letra convertida a mayuscula es: "+(char)valor+"");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConvertirSintactico$actions {
  private final ConvertirSintactico parser;

  /** Constructor */
  CUP$ConvertirSintactico$actions(ConvertirSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConvertirSintactico$do_action(
    int                        CUP$ConvertirSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConvertirSintactico$parser,
    java.util.Stack            CUP$ConvertirSintactico$stack,
    int                        CUP$ConvertirSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConvertirSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ConvertirSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencia ::= ALFA SUMA CONVERTIR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-2)).value;
		parser.convertir_ac(f.toString()); 
              CUP$ConvertirSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.peek()), RESULT);
            }
          return CUP$ConvertirSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= linea EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ConvertirSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.elementAt(CUP$ConvertirSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConvertirSintactico$parser.done_parsing();
          return CUP$ConvertirSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // linea ::= sentencia 
            {
              Object RESULT =null;

              CUP$ConvertirSintactico$result = parser.getSymbolFactory().newSymbol("linea",0, ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConvertirSintactico$stack.peek()), RESULT);
            }
          return CUP$ConvertirSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

